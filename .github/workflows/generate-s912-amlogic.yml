name: Generate Amlogic Firmware

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: "Select the release branch:"
        required: true
        default: "openwrt:23.05.5"
        type: choice
        options:
          - openwrt:21.02.7
          - openwrt:23.05.5
          - openwrt:24.10.0
          - openwrt:24.10.2
          - immortalwrt:21.02.7
          - immortalwrt:23.05.5
          - immortalwrt:24.10.0
      target:
        description: "Select device board"
        required: false
        default: "soc-s905x"
        type: choice
        options:
          - all
          - soc-s912
          - soc-s905x
          - soc-s905x2
          - soc-s905x3
          - nanopi-r5s
      openwrt_kernel:
        description: "Select kernel version"
        required: false
        default: "5.15.1_6.1.1"
        type: choice
        options:
          - 5.4.1_5.10.1
          - 5.15.1_6.1.1
          - 5.4.1
          - 5.4.y
          - 5.10.1
          - 5.15.1
          - 6.1.1
          - 6.6.y
      auto_kernel:
        description: "Auto use the latest kernel"
        required: false
        default: true
        type: boolean
      kernel_repo:
        description: "Set the kernel repository"
        required: false
        default: "ophub/kernel"
        type: choice
        options:
          - ophub/kernel
      kernel_usage:
        description: "Set the tags of the stable kernel."
        required: false
        default: "stable"
        type: choice
        options:
          - stable
          - flippy
          - dev
          - beta
      tunnel:
        description: "Select VPN Client app (!neko and passwall only support for newer branch with fw4 firewall!):"
        required: true
        default: "openclash-passwall"
        type: choice
        options:
          - all
          - openclash
          - neko
          - passwall
          - neko-openclash
          - openclash-passwall
          - neko-passwall
          - openclash-passwall-neko
          - no-tunnel
      clean:
        description: "Do 'make clean' for each run"
        required: false
        default: true
        type: boolean
      upload-prerelease:
        description: "Upload as pre-release"
        required: false
        default: false
        type: boolean
      revision-tag:
        description: "Revision img tag"
        required: false
        default: false
        type: boolean

env:
  TYPE: AMLOGIC
  TARGET: ${{ inputs.target }}
  RELEASE_BRANCH: ${{ inputs.release_branch }}
  TUNNEL: ${{ inputs.tunnel }}
  CLEAN: ${{ inputs.clean }}
  TZ: Asia/Jakarta
  PRE_RELEASE: ${{ inputs.upload-prerelease }}
  REVISION_TAG: ${{ inputs.revision-tag }}

jobs:
  Generate:
    name: amlogic-${{ env.TARGET }}-${{ env.RELEASE_BRANCH }}-${{ env.TUNNEL }}
    runs-on: ubuntu-22.04

    steps:
      - name: Check VPN Client Compatibility
        id: tunnel_check
        run: |
          if [[ ("$TUNNEL" == "neko" || "$TUNNEL" == "passwall" || "$TUNNEL" == "openclash-passwall" || "$TUNNEL" == "neko-passwall" || "$TUNNEL" == "neko-openclash" || "$TUNNEL" == "openclash-passwall-neko") && "${RELEASE_BRANCH#*:}" == "21.02.7" ]]; then
            echo "❌ Tunnel [$TUNNEL] is not supported on OpenWrt 21.02.7 (no fw4 firewall)."
            exit 1
          fi
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Set up dependencies
        if: steps.tunnel_check.outputs.status == 'success'
        run: |
          set -e
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs
          sudo timedatectl set-timezone "$TZ"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: origin

      - name: Prepare Environment Variables
        run: |
          set -e
          TARGET_NAME=""
          case "$TARGET" in
            all) echo "openwrt_board=all" >> $GITHUB_ENV ;;
            soc-s905x) echo "openwrt_board=s905x" >> $GITHUB_ENV ;;
            soc-s912) echo "openwrt_board=s912" >> $GITHUB_ENV ;;
            soc-s905x2) echo "openwrt_board=s905x2" >> $GITHUB_ENV ;;
            soc-s905x3) echo "openwrt_board=s905x3" >> $GITHUB_ENV ;;
            nanopi-r5s) echo "openwrt_board=rk3568" >> $GITHUB_ENV ;;
          esac

          OPENWRT_VERSION=$(echo "${RELEASE_BRANCH#*:}" | cut -d'.' -f1)
          if [ "$OPENWRT_VERSION" -ge 23 ]; then
            echo "PROFILE=generic" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=armsr/armv8" >> $GITHUB_ENV
            echo "TARGET_NAME=armsr-armv8" >> $GITHUB_ENV
          else
            echo "PROFILE=Default" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=armvirt/64" >> $GITHUB_ENV
            echo "TARGET_NAME=armvirt-64" >> $GITHUB_ENV
          fi

          echo "ARCH_1=arm64" >> $GITHUB_ENV
          echo "ARCH_2=aarch64" >> $GITHUB_ENV
          echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV
          echo "BASE=${RELEASE_BRANCH%:*}" >> $GITHUB_ENV
          echo "BRANCH=${RELEASE_BRANCH#*:}" >> $GITHUB_ENV
          echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
          echo "DATETIME=$(date +'%Y.%m.%d-%H:%M:%S')" >> $GITHUB_ENV
          echo "DATEMONTH=$(date +'%B-%Y' | awk '{print tolower($0)}')" >> $GITHUB_ENV
          echo "WORKING_DIR=${RELEASE_BRANCH%:*}-imagebuilder-${TARGET_NAME}.Linux-x86_64" >> $GITHUB_ENV
          echo "DOWNLOAD_BASE=https://downloads.${RELEASE_BRANCH%:*}.org" >> $GITHUB_ENV

      - name: Download Image Builder
        run: |
          set -e
          cd $GITHUB_WORKSPACE
          FILE_TAR="$DOWNLOAD_BASE/releases/$BRANCH/targets/$TARGET_SYSTEM/$BASE-imagebuilder-$BRANCH-$TARGET_NAME.Linux-x86_64"
          wget -nv -O builder.tar.xz "$FILE_TAR.tar.xz" || wget -nv -O builder.tar.zst "$FILE_TAR.tar.zst"
          if [[ -f builder.tar.xz ]]; then
            tar -xJf builder.tar.xz && rm builder.tar.xz
          elif [[ -f builder.tar.zst ]]; then
            tar --use-compress-program=unzstd -xf builder.tar.zst && rm builder.tar.zst
          fi
          mv *-imagebuilder-* "$WORKING_DIR"
          cp -r origin/* "$WORKING_DIR"

      - name: Run Custom Scripts & Download Packages
        run: |
          set -e
          cd "$WORKING_DIR"
          bash scripts/external-package-urls.sh
          if [[ "$BRANCH" == "21.02.7" ]]; then
            grep -E "^all-all|^old-21.02|^amlogic" external-package-urls.txt | awk '{print $2}' > output_url.txt
          else
            grep -E "^all-all|^all|^amlogic" external-package-urls.txt | grep -vE "^amlogic-21.02" | awk '{print $2}' > output_url.txt
          fi
          wget --no-check-certificate -i output_url.txt -nv -P packages
          bash scripts/builder-patch.sh
          bash scripts/agh-core.sh
          bash scripts/misc.sh

      - name: Build Rootfs
        run: |
          set -e
          cd "$WORKING_DIR"
          mkdir -p compiled_images
          if [[ "$TUNNEL" == "all" && "$BRANCH" != "21.02.7" ]]; then
            TUNNEL_LIST="openclash-passwall neko-passwall neko-openclash openclash-passwall-neko openclash passwall neko no-tunnel"
          elif [[ "$TUNNEL" == "all" && "$BRANCH" == "21.02.7" ]]; then
            TUNNEL_LIST="openclash no-tunnel"
          else
            TUNNEL_LIST="$TUNNEL"
          fi

          for t in $TUNNEL_LIST; do
            echo "➡️ Building with VPN Client: $t"
            if [[ "$CLEAN" == "true" ]]; then
              echo "Running make clean"
              make clean
            fi
            bash make-build.sh $PROFILE $t
            mv bin/targets/$TARGET_SYSTEM/*rootfs.tar.gz compiled_images/ || true
          done

      - name: Packaging Firmware
        uses: ophub/amlogic-s9xxx-openwrt@main
        with:
          openwrt_path: ${{ env.WORKING_DIR }}/compiled_images/*rootfs.tar.gz
          openwrt_board: ${{ env.openwrt_board }}
          openwrt_kernel: ${{ inputs.openwrt_kernel }}
          auto_kernel: ${{ inputs.auto_kernel }}
          kernel_repo: ${{ inputs.kernel_repo }}
          kernel_usage: ${{ inputs.kernel_usage }}
          builder_name: Action

      - name: Upload Firmware to GitHub Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.OWRT_TOKEN }}
          file: ${{ env.PACKAGED_OUTPUTPATH }}/*
          file_glob: true
          tag: amlogic-${{ env.openwrt_board }}-${{ env.BASE }}-${{ env.BRANCH }}-${{ env.DATEMONTH }}${{ env.REVISION_TAG == 'true' && '-rev' || '' }}
          release_name: amlogic-${{ env.openwrt_board }}-${{ env.BASE }}-${{ env.BRANCH }}-${{ env.DATEMONTH }}${{ env.REVISION_TAG == 'true' && '-rev' || '' }}
          overwrite: true
          prerelease: ${{ env.PRE_RELEASE }}
          body: |
            ### 🛠️ Firmware Build Info
            - Date: ${{ env.DATETIME }}
            - Branch: ${{ env.RELEASE_BRANCH }}
            - VPN: ${{ env.TUNNEL }}
            - Target: ${{ env.openwrt_board }}
            - Kernel: ${{ inputs.openwrt_kernel }}

            Default Login Info:
            - IP: 192.168.1.1
            - User: root
            - Pass: root
            - WiFi: OpenWRT / OpenWRT_5GHz (if supported)

            Flash to EMMC via System > Amlogic Service > Install OpenWrt.

