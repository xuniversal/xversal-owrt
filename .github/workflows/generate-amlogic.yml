#=====================================================================================
# Description: Build OpenWrt with Image Builder
# Repository:  https://github.com/ophub/amlogic-s9xxx-openwrt
# Docs:        https://openwrt.org/docs/guide-user/additional-software/imagebuilder
#=====================================================================================

name: Generate Amlogic Firmware

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: "Select the release branch:"
        required: true
        default: "openwrt:24.10.2"
        type: choice
        options:
          - openwrt:21.02.7
          - openwrt:23.05.5
          - openwrt:24.10.0
          - openwrt:24.10.2
          - immortalwrt:21.02.7
          - immortalwrt:23.05.5
          - immortalwrt:24.10.0

      target:
        description: "Select device board"
        required: false
        default: "s905x-b860h"
        type: choice
        options:
          - all
          - soc-s912
          - soc-s905x
          - soc-s905x2
          - soc-s905x3
          - nanopi-r5s

      openwrt_kernel:
        description: "Select kernel version"
        required: false
        default: "5.15.1_6.1.1"
        type: choice
        options:
          - 5.4.1_5.10.1
          - 5.15.1_6.1.1
          - 5.4.1
          - 5.10.1
          - 5.15.1
          - 6.1.1
          - 6.6.y

      auto_kernel:
        description: "Auto use the latest kernel"
        required: false
        default: true
        type: boolean

      kernel_repo:
        description: "Set the kernel repository"
        required: false
        default: "ophub/kernel"
        type: choice
        options:
          - ophub/kernel

      kernel_usage:
        description: "Set the tags of the stable kernel."
        required: false
        default: "stable"
        type: choice
        options:
          - stable
          - flippy
          - dev
          - beta

      tunnel:
        description: "Select VPN Client app (!neko and passwall only support for newer branch with fw4 firewall!):"
        required: true
        default: "openclash-passwall"
        type: choice
        options:
          - all
          - openclash
          - neko
          - passwall
          - neko-openclash
          - openclash-passwall
          - neko-passwall
          - openclash-passwall-neko
          - no-tunnel

      clean:
        description: "Do 'make clean' for each run"
        required: false
        default: true
        type: boolean

      upload-prerelease:
        description: "Upload as pre-release"
        required: false
        default: false
        type: boolean

      revision-tag:
        description: "Revision img tag"
        required: false
        default: false
        type: boolean

env:
  TYPE: AMLOGIC
  TARGET: ${{ inputs.target }}
  RELEASE_BRANCH: ${{ inputs.release_branch }}
  TUNNEL: ${{ inputs.tunnel }}
  CLEAN: ${{ inputs.clean }}
  TZ: Asia/Jakarta
  PRE_RELEASE: ${{ inputs.upload-prerelease }}
  REVISION_TAG: ${{ inputs.revision-tag }}

jobs:
  Generate:
    name: amlogic-${{ inputs.target }}-${{ inputs.release_branch }}-${{ inputs.tunnel }}
    runs-on: ubuntu-22.04

    steps:
      - name: Checking Tunnel Option
        id: tunnelopt
        run: |
          if [[ ("$TUNNEL" == "neko" || "$TUNNEL" == "passwall" || "$TUNNEL" == "openclash-passwall" || "$TUNNEL" == "neko-passwall" || "$TUNNEL" == "neko-openclash" || "$TUNNEL" == "openclash-passwall-neko") && "${RELEASE_BRANCH#*:}" == "21.02.7" ]]; then
            echo "Cannot continue the process because the selected tunnel [$TUNNEL]"
            echo "only supported on newer branches with fw4 firewall!"
            exit 1
          else
            echo "Selected tunnel option: [$TUNNEL]"
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Initialization environment (normal)
        if: github.event.inputs.target != 'all' && steps.tunnelopt.outputs.status == 'success' && !cancelled()
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs
          sudo timedatectl set-timezone "$TZ"

      - name: Initialization environment (deep)
        id: init
        if: github.event.inputs.target == 'all' && steps.tunnelopt.outputs.status == 'success' && !cancelled()
        run: |
          docker rmi $(docker images -q) 2>/dev/null
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          sudo apt-get -y update
          sudo apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)
          sudo systemctl daemon-reload
          sudo apt-get -y autoremove --purge
          sudo apt-get clean
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create simulated physical disk
        if: github.event.inputs.target == 'all'
        run: |
          mnt_size=$(($(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[A-Za-z]//g' | cut -d. -f1) - 1))
          root_size=$(($(df -h / | tail -1 | awk '{print $4}' | sed 's/[A-Za-z]//g' | cut -d. -f1) - 4))
          sudo truncate -s "${mnt_size}G" /mnt/mnt.img
          sudo truncate -s "${root_size}G" /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6 /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R runner:runner /builder
          df -Th

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: origin

      - name: Setup Environment Variables
        run: |
          case "$TARGET" in
            all)
              openwrt_board="all"
              ;;
            soc-s905x | hg680p | b860h)
              openwrt_board="s905x"
              ;;
            soc-s912)
              openwrt_board="s912"
              ;;
            soc-s905x2)
              openwrt_board="s905x2"
              ;;
            soc-s905x3)
              openwrt_board="s905x3"
              ;;
            nanopi-r5s)
              openwrt_board="rk3568"
              ;;
            *)
              echo "Unknown TARGET: $TARGET"
              exit 1
              ;;
          esac
          echo "openwrt_board=$openwrt_board" >> $GITHUB_ENV

          OPENWRT_VERSION=$(echo "${RELEASE_BRANCH#*:}" | cut -d'.' -f1)
          if [ "$OPENWRT_VERSION" -ge 23 ]; then
            echo "PROFILE=generic" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=armsr/armv8" >> $GITHUB_ENV
            echo "TARGET_NAME=armsr-armv8" >> $GITHUB_ENV
            TARGET_NAME="armsr-armv8"
          else
            echo "PROFILE=Default" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=armvirt/64" >> $GITHUB_ENV
            echo "TARGET_NAME=armvirt-64" >> $GITHUB_ENV
            TARGET_NAME="armvirt-64"
          fi

          echo "ARCH_1=arm64" >> $GITHUB_ENV
          echo "ARCH_2=aarch64" >> $GITHUB_ENV
          echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV

          echo "WORKING_DIR=${RELEASE_BRANCH%:*}-imagebuilder-${TARGET_NAME}.Linux-x86_64" >> $GITHUB_ENV
          echo "DOWNLOAD_BASE=https://downloads.${RELEASE_BRANCH%:*}.org" >> $GITHUB_ENV
          echo "BASE=${RELEASE_BRANCH%:*}" >> $GITHUB_ENV
          echo "BRANCH=${RELEASE_BRANCH#*:}" >> $GITHUB_ENV
          echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
          echo "DATETIME=$(date +'%Y.%m.%d-%H:%M:%S')" >> $GITHUB_ENV
          echo "DATEMONTH=$(date +"%B-%Y" | awk '{print tolower($0)}')" >> $GITHUB_ENV

      - name: Download Image Builder
        id: download
        run: |
          RELEASE_XZ="$DOWNLOAD_BASE/releases/$BRANCH/targets/$TARGET_SYSTEM/$BASE-imagebuilder-$BRANCH-$TARGET_NAME.Linux-x86_64.tar.xz"
          RELEASE_ZST="$DOWNLOAD_BASE/releases/$BRANCH/targets/$TARGET_SYSTEM/$BASE-imagebuilder-$BRANCH-$TARGET_NAME.Linux-x86_64.tar.zst"

          if wget -nv "$RELEASE_XZ"; then
            FILE_TYPE="xz"
          elif wget -nv "$RELEASE_ZST"; then
            FILE_TYPE="zst"
          else
            echo "❌ Error: Gagal mengunduh Image Builder (.xz atau .zst)"
            exit 1
          fi

          if [ "$FILE_TYPE" == "xz" ]; then
            tar -xJf *-imagebuilder-*.tar.xz && rm -f *-imagebuilder-*.tar.xz
          else
            tar --use-compress-program=unzstd -xf *-imagebuilder-*.tar.zst && rm -f *-imagebuilder-*.tar.zst
          fi

          sync
          mv *-imagebuilder-* "$WORKING_DIR"
          cp -r "$GITHUB_WORKSPACE/origin/"* "$GITHUB_WORKSPACE/$WORKING_DIR"

          if [ "$TARGET" == "all" ]; then
            mkdir -p /builder/$WORKING_DIR
            ln -sf /builder/$WORKING_DIR "$GITHUB_WORKSPACE/$WORKING_DIR"
            ln -sf /builder/$WORKING_DIR /home/runner/work/_actions/ophub/amlogic-s9xxx-openwrt/main/openwrt
          fi

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Download External Packages
        id: packages
        if: steps.download.outputs.status == 'success' && !cancelled()
        run: |
          cd "$WORKING_DIR"
          bash scripts/external-package-urls.sh
          if [[ "$BRANCH" == "21.02.7" ]]; then
            grep -E "^all-all|^old-21.02|^amlogic-$tags|^amlogic" external-package-urls.txt | awk '{print $2}' > output_url.txt
          else
            grep -E "^all-all|^all|^amlogic" external-package-urls.txt | grep -vE "^amlogic-21.02" | awk '{print $2}' > output_url.txt
          fi
          wget --no-check-certificate -i output_url.txt -nv -P packages
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Run Patch and DIY Scripts
        id: scripts
        if: steps.packages.outputs.status == 'success' && !cancelled()
        run: |
          cd "$WORKING_DIR"
          bash scripts/builder-patch.sh
          bash scripts/agh-core.sh
          bash scripts/misc.sh

          if [[ "$TUNNEL" == "all" && "$BRANCH" != "21.02.7" ]]; then
            bash scripts/tunnel_app.sh openclash-passwall-neko
          elif [[ "$TUNNEL" =~ passwall|neko|openclash && "$BRANCH" != "21.02.7" ]]; then
            bash scripts/tunnel_app.sh "$TUNNEL"
          elif [[ "$TUNNEL" == "all" && "$BRANCH" == "21.02.7" ]]; then
            bash scripts/tunnel_app.sh openclash
          fi

          if [[ "$TUNNEL" =~ openclash ]]; then bash scripts/clash-core.sh; fi
          if [[ "$TUNNEL" =~ neko ]]; then bash scripts/neko_core.sh; fi
          if [[ "$TUNNEL" == "all" || "$TUNNEL" == "openclash-passwall-neko" ]]; then
            bash scripts/clash-core.sh
            bash scripts/neko_core.sh
          fi

          echo "Total custom packages: $(find packages -type f -name '*.ipk' | wc -l)"
          ls packages
          echo "status=success" >> $GITHUB_OUTPUT
          echo "Disk usage before build:"
          df -hT "${PWD}"

      - name: Build Rootfs ${{ inputs.release_branch }}
        id: compile
        if: steps.scripts.outputs.status == 'success' && !cancelled()
        run: |
          cd "$WORKING_DIR"
          mkdir -p compiled_images

          if [[ "$TUNNEL" == "all" && "$BRANCH" != "21.02.7" ]]; then
            for t in openclash-passwall neko-passwall neko-openclash openclash-passwall-neko openclash passwall neko no-tunnel; do
              echo "🔨 Building with VPN: $t"
              [ "$CLEAN" == "true" ] && echo "🧹 Running make clean" && make clean
              time bash make-build.sh "$PROFILE" "$t"
              mv bin/targets/"$TARGET_SYSTEM"/*rootfs.tar.gz compiled_images/
            done

          elif [[ "$TUNNEL" == "all" && "$BRANCH" == "21.02.7" ]]; then
            for t in openclash no-tunnel; do
              echo "🔨 Building with VPN: $t"
              [ "$CLEAN" == "true" ] && echo "🧹 Running make clean" && make clean
              time bash make-build.sh "$PROFILE" "$t"
              mv bin/targets/"$TARGET_SYSTEM"/*rootfs.tar.gz compiled_images/
            done

          else
            echo "🔨 Building with VPN: $TUNNEL"
            bash make-build.sh "$PROFILE" "$TUNNEL"
            mv bin/targets/"$TARGET_SYSTEM"/*rootfs.tar.gz compiled_images/
          fi

          ls -lh compiled_images
          echo "status=success" >> $GITHUB_OUTPUT
          echo "Disk usage after build:"
          df -hT "${PWD}"

      - name: Clear server space
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          cd "$WORKING_DIR"
          rm -rf $(ls | grep -vE '^compiled_images$|^changelog_amlogic.md$')
          df -hT "${PWD}"

      - name: Packaging ${{ inputs.release_branch }}
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        uses: ophub/amlogic-s9xxx-openwrt@main
        with:
          openwrt_path: $WORKING_DIR/compiled_images/*rootfs.tar.gz
          openwrt_board: ${{ env.openwrt_board }}
          openwrt_kernel: ${{ inputs.openwrt_kernel }}
          auto_kernel: ${{ inputs.auto_kernel }}
          kernel_repo: ${{ inputs.kernel_repo }}
          kernel_usage: ${{ inputs.kernel_usage }}
          builder_name: Action

      - name: Prepare file before upload
        id: prep_upload
        if: ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
        run: |
          cd "$WORKING_DIR"
          mv compiled_images/*rootfs.tar.gz "${{ env.PACKAGED_OUTPUTPATH }}"
          cd "${{ env.PACKAGED_OUTPUTPATH }}"

          for file in *.img.gz; do
            mv "$file" "Action_$(basename "$file" .img.gz)_$TUNNEL$([ "$REVISION_TAG" == "true" ] && echo _rev).img.gz"
          done
          for file in *rootfs.tar.gz; do
            mv "$file" "Action_$(basename "$file" .tar.gz)_$TUNNEL$([ "$REVISION_TAG" == "true" ] && echo _rev).tar.gz"
          done

          if wget -q "https://github.com/xuniversal/xversal-owrt/releases/download/amlogic-${{ env.openwrt_board }}-${{ env.BASE }}-${{ env.BRANCH }}-${{ env.DATEMONTH }}/sha256sums"; then
            rm -f *.sha && sha256sum *.gz >> sha256sums
          else
            rm -f *.sha && sha256sum *.gz > sha256sums
          fi

          ls -lh
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Add changelog info and set tag name to new release
        if: ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
        id: changelog
        shell: bash
        run: |
          cd "$WORKING_DIR"
          echo "RELEASE_TAG=amlogic-${{ env.openwrt_board }}-${BASE}-${BRANCH}-${DATEMONTH}$([ "$REVISION_TAG" == "true" ] && echo -rev)" >> $GITHUB_ENV

          r=$(awk '/^\*\*Changelog\*\*/ {if(found) exit; found=1} found' changelog_amlogic.md)
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"
          echo "CHANGELOG=$r" >> $GITHUB_OUTPUT

      - name: Upload Firmware to Release
        uses: svenstaro/upload-release-action@v2
        if: ${{ steps.prep_upload.outputs.status }} == 'success' && !cancelled()
        with:
          repo_token: ${{ secrets.OWRT_TOKEN }}
          file_glob: true
          file: ${{ env.PACKAGED_OUTPUTPATH }}/*
          asset_name: ${{ github.event.repository.name }}-${{ github.sha }}
          tag: ${{ env.RELEASE_TAG }}
          release_name: ${{ env.RELEASE_TAG }}
          overwrite: true
          prerelease: ${{ env.PRE_RELEASE }}
          body: |
            ![GitHub Downloads](https://img.shields.io/github/downloads/xuniversal/xversal-owrt/${{ env.RELEASE_TAG }}/total?style=for-the-badge&logo=Openwrt)

            ### ${{ env.BASE }}-${{ env.BRANCH }} Image Build
            **Build Time**: ${{ env.DATETIME }}

            ${{ steps.changelog.outputs.CHANGELOG }}

            See [README](https://github.com/xuniversal/xversal-owrt?tab=readme-ov-file#firmware-details) for device features and instructions.

            **Default Settings**
            - IP: `192.168.1.1`
            - Username: `root`
            - Password: `root`
            - WiFi SSID: `OpenWRT` or `OpenWRT_5GHz`
            - WiFi Password: `openwrt`

            **To install on eMMC**
            - Go to OpenWrt → System → Amlogic Service → Install OpenWrt
